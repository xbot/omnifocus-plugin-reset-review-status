/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.reset_review_status",
    "version": "2.0",
    "description": "Reset review status of all projects.",
    "label": "Review again",
    "shortLabel": "Review again",
    "paletteLabel": "Review again",
    "image": "cup.and.saucer"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    const FIELD_FOLDERS = 'Folders';

    const MENU_ALL = 'all';

    const PREF_LAST_SELECTED_FOLDERS = 'lastSelectedFolders';

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            const folderIds   = [MENU_ALL].concat(flattenedFolders.map(folder => folder.id.primaryKey));
            const folderNames = ['All'].concat(
                flattenedFolders.map((folder) => {
                    let label = folder.name;

                    while (folder.parent !== null) {
                        label = folder.parent.name + ' > ' + label;
                        folder = folder.parent;
                    }

                    return label;
                })
            );

            const lastSelectedFolderIds = libdev.getJson(preferences, PREF_LAST_SELECTED_FOLDERS, []);

            const foldersMenu = new Form.Field.MultipleOptions(
                FIELD_FOLDERS,
                'Folders',
                folderIds,
                folderNames,
                lastSelectedFolderIds
            );

            const form = new Form();

            form.addField(foldersMenu);

            form.validate = function (formObject) {
                const selectedFolderIds = formObject.values[FIELD_FOLDERS];
                return selectedFolderIds.length > 0;
            };

            const formPromise = form.show('Choose folders to review', 'Apply');

            formPromise.then((formObject) => {
                let selectedFolderIds = formObject.values[FIELD_FOLDERS];

                if (selectedFolderIds.includes(MENU_ALL)) {
                    selectedFolderIds = [MENU_ALL];
                }

                selectedFolderIds.forEach((folderId) => {
                    let projects =
                        folderId === MENU_ALL
                            ? flattenedProjects
                            : Folder.byIdentifier(folderId).flattenedProjects;

                    projects.forEach((project) => {
                        project.nextReviewDate = new Date();
                    });
                });

                URL.fromString('omnifocus:///review').open();

                libdev.setJson(PREF_LAST_SELECTED_FOLDERS, selectedFolderIds);
            });
        } catch (err) {
            // Migration code, will be removed in the near future.
            if (err.name === 'SyntaxError' && err.message.startsWith('JSON Parse error: Unexpected identifier')) {
                const lastSelectedFolders = libdev.getString(preferences, PREF_LAST_SELECTED_FOLDERS).split(',');
                preferences.write(PREF_LAST_SELECTED_FOLDERS, JSON.stringify(lastSelectedFolders));

                new Alert('Congratulations', 'The configurations have been upgraded to the new version, try again.').show();
            } else {
                new Alert(err.name, err.message).show();
            }
        }
    });

    action.validate = function (selection, sender) {
        return true;
    };

    return action;
})();
